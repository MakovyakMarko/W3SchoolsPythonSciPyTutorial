# -*- coding: utf-8 -*-
"""
Created on Sat Jul 29 16:39:54 2023

@author: Marko
"""

# Оптимізатори — це набір процедур, визначених у SciPy, 
# які або знаходять мінімальне значення функції, або корінь 
# рівняння.
# По суті, усі алгоритми машинного навчання — це не що інше, 
# як складне рівняння, яке потрібно мінімізувати за 
# допомогою даних.

# Корені нелінійних рівнянь
from scipy.optimize import root
from math import cos

def enq(x):
    return x + cos(x)

myroot = root(enq, 0)
print(myroot.x)
print(myroot)

# Функція, у цьому контексті, представляє криву, криві 
# мають верхні та нижні точки .

# Високі точки називають максимумами .

# Найнижчі точки називаються мінімумами .

# Найвища точка всієї кривої називається глобальними 
# максимумами , а решта — локальними максимумами .

# Найнижчу точку всієї кривої називають глобальними 
# мінімумами , а решта — локальними мінімумами .

# Знаходження мінімумів
# Ми можемо використовувати scipy.optimize.minimize()
# функцію для мінімізації функції.

# Функція minimize()приймає такі аргументи:

# fun - функція, що представляє рівняння.

# x0 - початкове припущення для кореня.

# method - назва методу для використання. Правові значення:
#    'CG'
#    'BFGS'
#    'Newton-CG'
#    'L-BFGS-B'
#    'TNC'
#    'COBYLA'
#    'SLSQP'

# callback - функція, яка викликається після кожної 
# ітерації оптимізації.

# options - словник, що визначає додаткові параметри:

#{
#    "disp": boolean - print detailed description
#    "gtol": number - the tolerance of the error
#  }

from scipy.optimize import minimize
def enq(x):
    return x**2 + x + 2
mymin = minimize(enq, 0, method='BFGS')
print("function minimize:\n",mymin)
